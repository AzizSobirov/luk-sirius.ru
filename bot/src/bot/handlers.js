const { Keyboard, InlineKeyboard } = require("grammy");
const AuthService = require("../services/AuthService");
const UserService = require("../services/UserService");
const { AuthSession } = require("../models");
const config = require("../config/app");

class BotHandlers {
  async handleStart(ctx) {
    const authKey = ctx.match;

    if (!authKey) {
      await ctx.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n" +
          "üîê –î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ.",
        {
          reply_markup: new InlineKeyboard().url(
            "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
            config.frontendUrl
          ),
        }
      );
      return;
    }

    console.log(`üîç Auth attempt with key: ${authKey.substring(0, 8)}...`);

    const session = AuthService.activeSessions.get(authKey);
    if (!session) {
      const dbSession = await AuthSession.findOne({
        where: {
          sessionKey: authKey,
          expiresAt: { [require("sequelize").Op.gt]: new Date() },
          isUsed: false,
        },
      });

      if (!dbSession) {
        await ctx.reply(
          "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.\n\n" +
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π QR-–∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ.",
          {
            reply_markup: new InlineKeyboard().url(
              "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
              config.frontendUrl
            ),
          }
        );
        return;
      }
    } else if (session.expiresAt < new Date()) {
      AuthService.activeSessions.delete(authKey);
      await ctx.reply(
        "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π QR-–∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ."
      );
      return;
    } else if (session.status !== "waiting") {
      await ctx.reply("‚ùå –≠—Ç–∞ —Å–µ—Å—Å–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.");
      return;
    }

    // Update session
    AuthService.updateSessionStatus(authKey, "contact_requested", ctx.from.id);

    // Request contact
    const keyboard = new Keyboard()
      .requestContact("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
      .resized()
      .oneTime();

    await ctx.reply(
      "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç.\n\n" +
        "üì± –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω.\n\n" +
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
      { reply_markup: keyboard }
    );

    console.log(`üì± Contact requested for user: ${ctx.from.id}`);
  }

  async handleContact(ctx) {
    try {
      const contact = ctx.message.contact;
      const telegramId = ctx.from.id;

      if (contact.user_id !== telegramId) {
        await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.");
        return;
      }

      console.log(`üìû Contact received from user: ${telegramId}`);

      // Find active session for this user
      let userSessionKey = null;
      for (const [key, session] of AuthService.activeSessions.entries()) {
        if (
          session.telegramId === telegramId &&
          session.status === "contact_requested"
        ) {
          userSessionKey = key;
          break;
        }
      }

      if (!userSessionKey) {
        await ctx.reply(
          "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n" +
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ —Å —Å–∞–π—Ç–∞.",
          {
            reply_markup: new InlineKeyboard().url(
              "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
              config.frontendUrl
            ),
          }
        );
        return;
      }

      // Save user to database
      await UserService.createOrUpdateUser({
        telegramId,
        username: ctx.from.username || null,
        firstName: ctx.from.first_name || null,
        lastName: ctx.from.last_name || null,
        phone: contact.phone_number,
      });

      const user = await UserService.getUserById(telegramId);
      const token = AuthService.generateToken(user);

      // Update session in database
      await AuthSession.update(
        { telegramId, isUsed: true },
        { where: { sessionKey: userSessionKey } }
      );

      // Update session in memory with token
      AuthService.updateSessionStatus(userSessionKey, "completed", telegramId, token);

      // Success message with action button
      const keyboard = new InlineKeyboard().url(
        "üåê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç",
        config.frontendUrl
      );

      await ctx.reply(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n" +
          "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n" +
          "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä.",
        {
          reply_markup: keyboard,
          parse_mode: "HTML",
        }
      );

      console.log(`‚úÖ Authentication completed for user: ${telegramId}`);
    } catch (error) {
      console.error("Contact handling error:", error);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n" +
          "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π QR-–∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ."
      );
    }
  }

  async handleCallbackQuery(ctx) {
    await ctx.answerCallbackQuery();
  }
}

module.exports = new BotHandlers();
